class Solution {
public:
    int numSubarraysWithSum(vector<int>& nums, int goal) {
        int n = nums.size();
        if (n == 0) return 0;
        int cnt = 0, zero = 0;
        
        if (goal == 0){
            for (int k: nums){
                if (k == 1) {
                    cnt += zero*(zero + 1)/2;
                    zero = 0;
                } else {
                    zero++;
                }
            }
            return cnt + zero*(zero + 1)/2;
        }
        
        vector<int> ones;
        
        for (int k: nums){
            if (k == 1){
                ones.push_back(zero+1);
                zero = 0;
            } else {
                zero++;
            }
        }
        ones.push_back(zero+1);
        
        int l = 0, r = goal;
        
        for (; r < ones.size(); r++){
            cnt += ones[l]*ones[r];
            l++;
        }
        return cnt;
        
//         int n = nums.size(), curr = 0, cnt = 0;
        
//         if (n == 0) return 0;
        
//         vector<int> pref{0};
//         for (int i = 0; i < n; i++){
//             curr += nums[i];
//             pref.push_back(curr);
//         }
        
//         unordered_map<int, int> m;
        
//         for (int x: pref){
//             cnt += m[x];
//             m[x+goal] += 1;
//         }
//         return cnt;
  
    }
};
