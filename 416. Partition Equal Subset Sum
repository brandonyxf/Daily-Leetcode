class Solution {
public:
    bool canPartition(vector<int>& nums) {
        int summ = accumulate(nums.begin(), nums.end(), 0);
        if (summ % 2 != 0) return false;
        int half = summ / 2, n = nums.size();
        // int dp[n][half+1];
        // bool dp[half+1];
        // fill_n(dp.begin(), dp.end(), false);
        vector<bool> dp(half+1);
        dp[0] = true;
        
        for (int i = n-1; i >= 0; i--){
            for (int j = half; j >=0; j--){
                if (j >= nums[i]){
                    dp[j] = dp[j] || dp[j - nums[i]];
                }
            }
            if (dp[half]) return true;
        }
        return false;
    }
};
