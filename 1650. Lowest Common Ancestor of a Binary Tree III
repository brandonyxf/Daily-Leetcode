/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* parent;
};
*/

class Solution {
public:
    Node* lowestCommonAncestor(Node* p, Node * q){
        Node* a = p;
        Node* b = q;
        
        while (a != b){
            if (!a){
                a = q;
            } else {
                a = a->parent;
            }
            if (!b){
                b = p;
            } else {
                b = b->parent;
            }
        }
        return a;
    }
//     Node* lowestCommonAncestor(Node* p, Node * q) {
//         unordered_set<int> m;
        
//         Node* h = p;
//         while (h != NULL){
//             m.insert(h->val);
//             h = h->parent;
//         }
        
//         h = q;
//         while (m.count(h->val) == 0){
//             h = h->parent;
//         }
//         return h;
//     }
};

// Cound be faster by using parent as link list 
