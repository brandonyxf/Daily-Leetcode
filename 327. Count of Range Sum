class Solution {
public:
    int countRangeSum(vector<int>& nums, int lower, int upper) {
        int n = nums.size();
        vector<long> px(n+1, 0);
        // px[0] = nums[0];
        for (int i = 1; i <= nums.size(); i++){
            px[i] = nums[i-1] + px[i-1];
        }
        
        return mergeSort(px, lower, upper, 0, n+1);
    }
    
    int mergeSort(vector<long>& px, int lower, int upper, int low, int high){
        if ((high - low) <= 1) return 0;
        int mid = low + (high - low)/2;
        int m = mid, n = mid, cnt = 0;
        cnt = mergeSort(px, lower, upper, low, mid) + mergeSort(px, lower, upper, mid, high);
        for (int i = low; i < mid; i++){
            while(m < high && px[m] - px[i] < lower) m++;
            while(n < high && px[n] - px[i] <= upper) n++;
            cnt += n - m;
        }
        inplace_merge(px.begin()+low, px.begin()+mid, px.begin()+high);
        return cnt;
    }
};
