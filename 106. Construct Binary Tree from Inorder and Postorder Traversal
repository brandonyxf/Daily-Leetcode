/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        int n = inorder.size();
        return helper(inorder, postorder, 0, n, 0, n);
    }
    
    TreeNode* helper(vector<int>& inorder, vector<int>& postorder, int ip, int ep, int ii, int ei){
        if (ip >= ep || ii >= ei){
            return NULL;
        }
        
        auto id = find(inorder.begin(), inorder.end(), postorder[ep-1]);
        int dis = ei - (id - inorder.begin());
        
        TreeNode* root = new TreeNode(*id);
        root->left = helper(inorder, postorder, ip, ep - dis, ii, id - inorder.begin());
        root->right = helper(inorder, postorder, ep - dis, ep - 1, id - inorder.begin() + 1, ei);
        return root;
        
    }
};
