class Solution {
public:
    int longestValidParentheses(string s) {
//         int n = s.size();
//         if (n <= 1){
            
//         }
//         int maxLen = 0;
//         vector<int> dp(n, 0);
//         for (int i = 1; i < n; i++){
//             if (s[i] == ')' && i - dp[i-1] - 1 >= 0 && s[i - dp[i-1] - 1] == '('){
//                 if (i - dp[i-1] - 2 >= 0){
//                     dp[i] = dp[i-1] + 2 + dp[i - dp[i-1] - 2];
//                 } else {
//                     dp[i] = dp[i-1] + 2;
//                 }
//                 maxLen = max(maxLen, dp[i]);
//             }
//         }
//         return maxLen;
        
        int n = s.size();
        stack<int> st;
        st.push(-1);
        int maxLen = 0;
        
        for (int i = 0; i < n; i++){
            if (s[i] == '('){
                st.push(i);
            } else {
                st.pop();
                if (st.empty()){
                    st.push(i);
                }
                maxLen = max(maxLen, i - st.top());
            }
        }
        return maxLen;
    }
};
