class Solution {
public:
    int kthSmallest(vector<vector<int>>& mat, int k) {
        int m = mat.size(), n = mat[0].size();
        int vec[k];
        priority_queue<int> pq;
        
        for (int i = 0; i < k; i++) {
            if (i >= n) vec[i] = 5000;
            else {vec[i] = mat[0][i];}
        }
        
        for (int i = 1; i < m; i++) {
            for (int j = 0; j < n && j < k; j++) {
                for (int l = 0; l < k; l++) {
                    int val = mat[i][j] + vec[l];
                    if (pq.size() < k) {
                        pq.push(val);
                    } else if (pq.top() > val) {
                        pq.pop();
                        pq.push(val);
                    }
                }
            }
            int e = pq.size();
            while(!pq.empty()) {
                vec[--e] = pq.top();
                pq.pop();
            }
            
        }
        return vec[k-1];
        

        
//         int m = mat.size(), n = mat[0].size();
//         vector<int> row = mat[0];
//         for (int i = 1; i < m; i++) {
//             vector<int> cur;
//             for (int j = 0; j < n; j++) {
                
//                 for (int x: row) {
//                     cur.push_back(x+mat[i][j]);
//                 }
//             }
            
//             sort(cur.begin(), cur.end());
//             row.resize(min(k, int(cur.size())));
//             for (int l = 0; l < row.size(); l++) {
//                 row[l] = cur[l];
//             }
            
//         }
//         return row.back();
    }
};
