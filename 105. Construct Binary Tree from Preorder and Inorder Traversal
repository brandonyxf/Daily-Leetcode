/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        int n = preorder.size();
        return build(preorder, inorder, 0, n, 0, n);
    }
    
    TreeNode* build(vector<int>& preorder, vector<int>& inorder, int ip, int ep, int ii, int ei){
        if (ip >= ep || ii >= ei){
            return NULL;
        }
        
        int mid = preorder[ip];
        auto p = find(inorder.begin()+ii, inorder.begin()+ei, mid);
        
        int dis = p - inorder.begin() - ii;
        
        TreeNode* root = new TreeNode(mid);
        root->left = build(preorder, inorder, ip+1, ip+1+dis, ii, ii+dis);
        root->right = build(preorder, inorder, ip+1+dis, ep, ii+dis+1, ei);
        return root;
    }
};
