class MKAverage {
public:
    int m, k, sum = 0;
    queue<int> q;
    multiset<int> left, mid, right;
    MKAverage(int m, int k) {
        this->m = m;
        this->k = k;
    }
    
    void addElement(int num) {
        q.push(num);
        if (mid.empty()) {
            if (q.size() == m){
                initiate();
            }
        } else {
            removeElement(q.front());
            q.pop();
            
            left.insert(num);
            if (left.size() > k) {
                auto it = (--left.end());
                mid.insert(*it);
                sum += *it;
                left.erase(it);
            }
            if (mid.size() > m-2*k) {
                auto it = (--mid.end());
                right.insert(*it);
                sum -= *it;
                mid.erase(it);
            }
        }
    }
    
    void removeElement(int num) {
        // cout << *right.rbegin() << endl;
        if (num <= *left.rbegin()) {
            left.erase(left.find(num));
        } else if (num <= *mid.rbegin()) {
            auto it = mid.find(num);
            sum -= *it;
            mid.erase(it);
        } else {
            right.erase(right.find(num));
        }
        
        if (left.size() < k) {
            auto fir = mid.begin();
            left.insert(*fir);
            sum -= *fir;
            mid.erase(fir);
        }
        
        if (mid.size() < m-2*k) {
            auto fir = right.begin();
            mid.insert(*right.begin());
            sum += *fir;
            right.erase(fir);
        }
        
    }
    
    int calculateMKAverage() {
        // cout << sum << endl;
        return q.size() < m? -1: sum/((int)mid.size());
    }
    
    void initiate(){
        vector<int> nums;
        queue<int> cur_q = q;
        while(!cur_q.empty()) {
            nums.push_back(cur_q.front());
            cur_q.pop();
        }
        sort(nums.begin(), nums.end());
        
        for (int i = 0; i < m; i++){
            if (i < k) {
                left.insert(nums[i]);
            } else if (i < m - k) {
                mid.insert(nums[i]);
                sum += nums[i];
            } else {
                right.insert(nums[i]);
            }
        }
    }
};

/**
 * Your MKAverage object will be instantiated and called as such:
 * MKAverage* obj = new MKAverage(m, k);
 * obj->addElement(num);
 * int param_2 = obj->calculateMKAverage();
 */
