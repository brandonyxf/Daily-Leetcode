/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* recoverFromPreorder(string S) {
        vector<pair<int, int>> v;
        // v.push_back({S[0], 0});
        int cur = 0;
        int curStr = 0;
        for (int i = 0; i < S.length(); i++){
            if (S[i] == '-'){
                if (curStr != 0) {
                    v.push_back({curStr, cur});
                    cur = 0;
                    curStr = 0;
                }
                cur++;
            } else {
                curStr = curStr*10 + S[i] - '0';
            }
        }
        v.push_back({curStr, cur});
        TreeNode* root = new TreeNode(v[0].first);
        int i = 1;
        helper(root, root, 0, v, i);
        return root;
    }
    
    void helper(TreeNode*& node, TreeNode*& parent, int level, vector<pair<int, int>>& v, int& i){
        while (i < v.size()){
        if (v[i].second == level+1){
            TreeNode* left = new TreeNode(v[i].first);
            node->left = left;
            i++;
            helper(node->left, node, level+1, v, i);
        } else if (v[i].second == level) {
            TreeNode* right = new TreeNode(v[i].first);
            parent->right = right;
            i++;
            helper(parent->right, parent, level, v, i);
        } else if (v[i].second < level) {
            return;
        }
        }
        return;
    }
    
};
