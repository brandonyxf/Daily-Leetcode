class Solution {
public:
    int splitArray(vector<int>& nums, int m) {
//         int n = nums.size();
//         vector<vector<int>> dp(n+1, vector<int>(m+1, INT_MAX));
//         vector<int> sub(n+1, 0);
//         for (int i = 0; i < n; i++){
//             sub[i+1] = sub[i] + nums[i];
//         }
        
//         dp[0][0] = 0;
        
//         for (int i = 0; i <= n; i++){
//             for (int j = 1; j <= m; j++){
//                 for (int k = 0; k < i; k++){
//                     dp[i][j] = min(dp[i][j], max(dp[k][j-1], sub[i] - sub[k]));
//                 }
//             }
//         }
//         return dp[n][m];
        
        long l = 0, r = 0;
        int n = nums.size();
        for (int i = 0; i < n; i++){
            r += nums[i];
            if (l < nums[i]){
                l = nums[i];
            }
        }
        long ans = r;
        while(l < r){
            long mid = l + (r - l)/2;
            long sum = 0;
            int cnt = 1;
            for (int i = 0; i < n; i++){
                if (sum + nums[i] > mid){
                    cnt++;
                    sum = nums[i];
                } else {
                    sum += nums[i];
                }
            }
            if (cnt <= m){
                ans = min(ans, mid);
                r = mid;
            } else {
                l = mid + 1;
            }
        }
        
        return ans;
        
    }
};
