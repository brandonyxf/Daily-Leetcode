/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    TreeNode* ans;
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, vector<TreeNode*> &nodes){
        if (!root){
            return NULL;
        }
        for (TreeNode* k: nodes){
            if (k == root){
                return k;
            }
        }
        TreeNode* l = lowestCommonAncestor(root->left, nodes);
        TreeNode* r = lowestCommonAncestor(root->right, nodes);
        
        if (l && r) return root;
        if (l) return l;
        if (r) return r;
        return NULL;
    }
    
//     TreeNode* lowestCommonAncestor(TreeNode* root, vector<TreeNode*> &nodes) {
//         unordered_set<TreeNode*> m;
//         for(TreeNode* k: nodes){
//             m.insert(k);
//         }
//         dfs(root, m, nodes.size());
//         return ans;
//     }
    
//     int dfs (TreeNode* root, unordered_set<TreeNode*>& m, int n){
//         if (!root){
//             return 0;
//         }
        
//         int mid = 0;
//         if (m.count(root) > 0){
//             mid = 1;
//             m.erase(root);
//         }
        
//         int left = dfs(root->left, m, n);
//         if (left == -1){
//             return -1;
//         }
//         int right = dfs(root->right, m,n );
//         // if (right == -1){
//         //     return -1;
//         // }

//         int summ = left + right + mid;
//         if (summ == n){
//             ans = root;
//             return -1;
//         } else {
//             return summ;
//         }
//         return summ;
//     }
};
