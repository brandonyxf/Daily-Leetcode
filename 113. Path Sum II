/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> pathSum(TreeNode* root, int targetSum) {
        if (!root) return ans;
        vector<int> cur;
        dfs(root, targetSum, cur);
        return ans;
    }
    
    void dfs(TreeNode* root, int target,  vector<int>& cur){
        // if (root->val > target) return;
        cur.push_back(root->val);
        if (!root->left && !root->right){
            if (root->val == target)
            ans.push_back(cur);
        } else {
            if (root->left) {
                dfs(root->left, target - root->val, cur);
                cur.pop_back();
            }
            if (root->right) {
                dfs(root->right, target - root->val, cur);
                cur.pop_back();
            }
        }
        
    }
private:
    vector<vector<int>> ans;
};
