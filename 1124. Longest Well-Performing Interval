class Solution {
public:
    int longestWPI(vector<int>& hours) {
        int n = hours.size();
        int pref[n+1];
        
        pref[0] = 0;
        
        for (int i = 0; i < n; i++) {
            pref[i+1] = pref[i] + (hours[i] > 8? 1:-1);
        }
        
        stack<int> st;
        st.push(0);
        
        for (int i = 1; i < n; i++) {
            if (pref[i] < pref[st.top()]){
                st.push(i);
            }
        }
        
        int maxLen = 0;
        
        for (int i = n; i >= 0; i--) {
            while (!st.empty() && pref[st.top()] < pref[i]) {
                maxLen = max(i - st.top(), maxLen);
                st.pop();
            }
        }
        return maxLen;
        
    }
};
