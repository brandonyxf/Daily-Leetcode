class Solution {
public:
    int minJumps(vector<int>& arr) {
        unordered_map<int, vector<int>> m;
        int n = arr.size();
        vector<bool> visited(n, false);
        for (int i = 0; i < n; i++){
            m[arr[i]].push_back(i);
        }
        
        queue<int> q;
        q.push(0);
        visited[0] = true;
        int step = 0;
        
        while(!q.empty()){
            int nq = q.size();
            for (int j = 0; j < nq; j++) {
                int a = q.front();
                if (a == n - 1) return step;
                q.pop();
                vector<int>& next = m[arr[a]];
                if (a == 0) next.push_back(a + 1);
                else {
                    next.push_back(a - 1); 
                    next.push_back(a + 1);
                }
                for (int k: next){
                    if (!visited[k]){
                        q.push(k);
                        visited[k] = true;
                    }
                }
                cout << arr[a] << " " << next.size() << endl;
                next.clear();
            }
            step++;
        }
        return 0;
    }
};
