/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int longestUnivaluePath(TreeNode* root) {
        if (!root) return 0;
        // if (!root->left && !root->right) return 0;
        dfs(root);
        return ans-1;
    }
    
    int dfs(TreeNode* root){
        int l = 0, r = 0, mlen = 1;
        if (root->left){
            l = dfs(root->left);
            if (root->left->val == root->val){
                ans = max(ans, l+1);
                mlen = max(mlen, l+1);
            }
        }
        
        if (root->right){
            r = dfs(root->right);
            if (root->right->val == root->val){
                ans = max(ans, r+1);
                mlen = max(mlen, r+1);
            }
        }

        if (root->left && root->right && root->left->val == root->val && root->right->val == root->val){
            ans = max(ans, l+r+1);
        }
        
        return mlen;
    }
    
private:
    int ans = 1;
        
    
};
