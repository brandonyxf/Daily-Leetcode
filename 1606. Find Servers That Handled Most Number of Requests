class Solution {
public:
    vector<int> busiestServers(int k, vector<int>& arrival, vector<int>& load) {
        vector<int> cnt(k), avail(k), res;
        map<int, int> m;
        
        for (int i = 0, last_i = 0; ; i++) {
            if (i < arrival.size())
            m[arrival[i]] = load[i];
            else if (i - last_i > k) break;
            
            auto it = m.lower_bound(avail[i%k]);
            while (it != m.end()) {
                last_i = i;
                cnt[i%k]++;
                avail[i%k] = it->first + it->second;
                
                m.erase(it);
                it = m.lower_bound(avail[i%k]);

            }
        }
        
        int maxx = *max_element(cnt.begin(), cnt.end());
        
        for (int i = 0; i < cnt.size(); i++) {
            if (cnt[i] == maxx){
                res.push_back(i);
            }
        }
        return res;
    }
};
