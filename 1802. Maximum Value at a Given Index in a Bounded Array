class Solution {
public:
    int maxValue(int n, int i, int maxSum) {
        int l = maxSum/n, r = maxSum;
        long summ = 0;
        while (l < r){
            int mid = l + (r - l)/2;
            summ = summation(n, i, maxSum, mid);    
            // cout << summ << endl;
            if (summ >= (long)maxSum) {
                r = mid;
            } else {
                l = mid + 1;
            }
        }
        
        if (summation(n, i, maxSum, r) > maxSum) return r - 1;
        else return r;
    }
    
    long summation(int n, int i, int maxSum, int mid) {
        int large = max(i, n - i - 1)+1, small = min(i, n - i - 1)+1;
        long summ;
        if (mid >= large) {
            summ = (long)(mid - 1 + mid - i)*i/2 + (long)(mid + mid + i - n + 1)*(n - i)/2;
        } else if (mid <= small) {
            summ = (long)mid*mid + n - 2*mid + 1;
        } else {
            summ = (long)small*(mid*2 - small + 1)/2 + large - mid + (long)(mid - 1)*mid/2;
        }
        return summ;
    }
    
};
